/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class PositionViewEntity : TBase
{
  private string _id;
  private string _ap_id;
  private short _left_or_right;
  private double _distance;
  private List<string> _points;

  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public string Ap_id
  {
    get
    {
      return _ap_id;
    }
    set
    {
      __isset.ap_id = true;
      this._ap_id = value;
    }
  }

  public short Left_or_right
  {
    get
    {
      return _left_or_right;
    }
    set
    {
      __isset.left_or_right = true;
      this._left_or_right = value;
    }
  }

  public double Distance
  {
    get
    {
      return _distance;
    }
    set
    {
      __isset.distance = true;
      this._distance = value;
    }
  }

  public List<string> Points
  {
    get
    {
      return _points;
    }
    set
    {
      __isset.points = true;
      this._points = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool id;
    public bool ap_id;
    public bool left_or_right;
    public bool distance;
    public bool points;
  }

  public PositionViewEntity() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Ap_id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I16) {
              Left_or_right = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              Distance = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                Points = new List<string>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  string _elem2;
                  _elem2 = iprot.ReadString();
                  Points.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("PositionViewEntity");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (Ap_id != null && __isset.ap_id) {
        field.Name = "ap_id";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Ap_id);
        oprot.WriteFieldEnd();
      }
      if (__isset.left_or_right) {
        field.Name = "left_or_right";
        field.Type = TType.I16;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Left_or_right);
        oprot.WriteFieldEnd();
      }
      if (__isset.distance) {
        field.Name = "distance";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Distance);
        oprot.WriteFieldEnd();
      }
      if (Points != null && __isset.points) {
        field.Name = "points";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Points.Count));
          foreach (string _iter3 in Points)
          {
            oprot.WriteString(_iter3);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("PositionViewEntity(");
    bool __first = true;
    if (Id != null && __isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (Ap_id != null && __isset.ap_id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Ap_id: ");
      __sb.Append(Ap_id);
    }
    if (__isset.left_or_right) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Left_or_right: ");
      __sb.Append(Left_or_right);
    }
    if (__isset.distance) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Distance: ");
      __sb.Append(Distance);
    }
    if (Points != null && __isset.points) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Points: ");
      __sb.Append(Points);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

